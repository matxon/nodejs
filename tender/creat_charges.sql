-- MySQL Script generated by MySQL Workbench
-- 06/29/15 17:33:19
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema agk_charges
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `agk_charges` ;

-- -----------------------------------------------------
-- Schema agk_charges
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `agk_charges` DEFAULT CHARACTER SET utf8 ;
USE `agk_charges` ;

-- -----------------------------------------------------
-- Table `agk_charges`.`units`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `agk_charges`.`units` (
  `unit_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `unit` VARCHAR(8) NOT NULL,
  PRIMARY KEY (`unit_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `agk_charges`.`charges`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `agk_charges`.`charges` (
  `charge_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `charge` VARCHAR(100) NOT NULL,
  `description` TINYTEXT NULL,
  `unit_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`charge_id`),
  INDEX `fk_charges_unit_idx` (`unit_id` ASC),
  CONSTRAINT `fk_charges_units1`
    FOREIGN KEY (`unit_id`)
    REFERENCES `agk_charges`.`units` (`unit_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `agk_charges`.`storages`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `agk_charges`.`storages` (
  `storage_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `storage_name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`storage_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `agk_charges`.`purchases`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `agk_charges`.`purchases` (
  `purchase_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `date` DATE NOT NULL,
  `provider` VARCHAR(100) NOT NULL,
  `storage_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`purchase_id`),
  INDEX `fk_purchases_storages1_idx` (`storage_id` ASC),
  CONSTRAINT `fk_purchases_storages1`
    FOREIGN KEY (`storage_id`)
    REFERENCES `agk_charges`.`storages` (`storage_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `agk_charges`.`purchase_invoices`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `agk_charges`.`purchase_invoices` (
  `purchase_id` INT UNSIGNED NOT NULL,
  `charge_id` INT UNSIGNED NOT NULL,
  `qty` INT NOT NULL DEFAULT 0,
  INDEX `fk_invoices_purchases1_idx` (`purchase_id` ASC),
  INDEX `fk_purchase_invoices_charges1_idx` (`charge_id` ASC),
  CONSTRAINT `fk_invoices_purchases1`
    FOREIGN KEY (`purchase_id`)
    REFERENCES `agk_charges`.`purchases` (`purchase_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_purchase_invoices_charges1`
    FOREIGN KEY (`charge_id`)
    REFERENCES `agk_charges`.`charges` (`charge_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `agk_charges`.`employees`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `agk_charges`.`employees` (
  `employee_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `first_name` VARCHAR(45) NOT NULL,
  `last_name` VARCHAR(45) NOT NULL,
  `o_name` VARCHAR(45) NULL,
  `pass_number` VARCHAR(12) NULL DEFAULT '000000000',
  `organ_name` VARCHAR(45) NULL,
  PRIMARY KEY (`employee_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `agk_charges`.`sales`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `agk_charges`.`sales` (
  `sale_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `date` DATE NOT NULL,
  `provider` VARCHAR(100) NOT NULL,
  `storage_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`sale_id`),
  INDEX `fk_sales_storages1_idx` (`storage_id` ASC),
  CONSTRAINT `fk_sales_storages1`
    FOREIGN KEY (`storage_id`)
    REFERENCES `agk_charges`.`storages` (`storage_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `agk_charges`.`sales_invoices`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `agk_charges`.`sales_invoices` (
  `sale_id` INT UNSIGNED NOT NULL,
  `charge_id` INT UNSIGNED NOT NULL,
  `qty` INT NOT NULL DEFAULT 0,
  INDEX `fk_charge_idx` (`charge_id` ASC),
  INDEX `fk_sales_invoices_sale1_idx` (`sale_id` ASC),
  CONSTRAINT `fk_sales_invoices_sales1`
    FOREIGN KEY (`sale_id`)
    REFERENCES `agk_charges`.`sales` (`sale_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_sales_invoices_charges1`
    FOREIGN KEY (`charge_id`)
    REFERENCES `agk_charges`.`charges` (`charge_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `agk_charges`.`balans`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `agk_charges`.`balans` (
  `charge_id` INT UNSIGNED NOT NULL,
  `qty` INT NOT NULL DEFAULT 0,
  `storage_id` INT UNSIGNED NOT NULL,
  INDEX `index1` (`charge_id` ASC),
  INDEX `fk_balans_storages1_idx` (`storage_id` ASC),
  PRIMARY KEY (`charge_id`, `storage_id`),
  CONSTRAINT `fk_balans_charges1`
    FOREIGN KEY (`charge_id`)
    REFERENCES `agk_charges`.`charges` (`charge_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_balans_storages1`
    FOREIGN KEY (`storage_id`)
    REFERENCES `agk_charges`.`storages` (`storage_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `agk_charges` ;

-- -----------------------------------------------------
-- function get_purchase_id
-- -----------------------------------------------------

DELIMITER $$
USE `agk_charges`$$
CREATE FUNCTION `get_purchase_id` (id INT) RETURNS INT
BEGIN
	DECLARE res INT;
	SELECT 
		storage_id
	INTO res FROM
		agk_charges.purchases
	WHERE
		purchase_id = id;
    RETURN res;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function get_sale_id
-- -----------------------------------------------------

DELIMITER $$
USE `agk_charges`$$
CREATE FUNCTION `get_sale_id` (id INT) RETURNS INT
BEGIN
	DECLARE res INT;
	SELECT 
		storage_id
	INTO res FROM
		agk_charges.sales
	WHERE
		sale_id = id;
    RETURN res;
END
$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `agk_charges`.`units`
-- -----------------------------------------------------
START TRANSACTION;
USE `agk_charges`;
INSERT INTO `agk_charges`.`units` (`unit_id`, `unit`) VALUES (DEFAULT, 'м.');
INSERT INTO `agk_charges`.`units` (`unit_id`, `unit`) VALUES (DEFAULT, 'кг.');
INSERT INTO `agk_charges`.`units` (`unit_id`, `unit`) VALUES (DEFAULT, 'шт.');
INSERT INTO `agk_charges`.`units` (`unit_id`, `unit`) VALUES (DEFAULT, 'ком-т');

COMMIT;


-- -----------------------------------------------------
-- Data for table `agk_charges`.`charges`
-- -----------------------------------------------------
START TRANSACTION;
USE `agk_charges`;
INSERT INTO `agk_charges`.`charges` (`charge_id`, `charge`, `description`, `unit_id`) VALUES (DEFAULT, 'Куммулятивный заряд DP St RDX, 26гр', '26 гр', 3);
INSERT INTO `agk_charges`.`charges` (`charge_id`, `charge`, `description`, `unit_id`) VALUES (DEFAULT, 'Куммулятивный заряд DP St RDX, 39гр', '39 гр', 3);
INSERT INTO `agk_charges`.`charges` (`charge_id`, `charge`, `description`, `unit_id`) VALUES (DEFAULT, 'Куммулятивный заряд DP 2 St RDX, 32гр', '32 гр', 3);
INSERT INTO `agk_charges`.`charges` (`charge_id`, `charge`, `description`, `unit_id`) VALUES (DEFAULT, 'Куммулятивный заряд DP 2 St HMX, 39гр', '39 гр', 3);
INSERT INTO `agk_charges`.`charges` (`charge_id`, `charge`, `description`, `unit_id`) VALUES (DEFAULT, 'Куммулятивный заряд DP 44-3 RDX, 39гр', '39 гр', 3);
INSERT INTO `agk_charges`.`charges` (`charge_id`, `charge`, `description`, `unit_id`) VALUES (DEFAULT, 'Куммулятивный заряд Link TTG RDX, 8гр', '8 гр', 3);
INSERT INTO `agk_charges`.`charges` (`charge_id`, `charge`, `description`, `unit_id`) VALUES (DEFAULT, 'Куммулятивный заряд ЗПРК 42 С', NULL, 3);
INSERT INTO `agk_charges`.`charges` (`charge_id`, `charge`, `description`, `unit_id`) VALUES (DEFAULT, 'Куммулятивный заряд ЗПРК 54 С', NULL, 3);
INSERT INTO `agk_charges`.`charges` (`charge_id`, `charge`, `description`, `unit_id`) VALUES (DEFAULT, 'Куммулятивный заряд ЗПМ 73 С', NULL, 3);
INSERT INTO `agk_charges`.`charges` (`charge_id`, `charge`, `description`, `unit_id`) VALUES (DEFAULT, 'Куммулятивный заряд ЗПМ 102 С', NULL, 3);
INSERT INTO `agk_charges`.`charges` (`charge_id`, `charge`, `description`, `unit_id`) VALUES (DEFAULT, 'Куммулятивный заряд ЗПКС-80', NULL, 3);
INSERT INTO `agk_charges`.`charges` (`charge_id`, `charge`, `description`, `unit_id`) VALUES (DEFAULT, 'Куммулятивный заряд ВH St RDX, 22.7гр', NULL, 3);
INSERT INTO `agk_charges`.`charges` (`charge_id`, `charge`, `description`, `unit_id`) VALUES (DEFAULT, 'Куммулятивный заряд ЗКПО ПП-30ГП', NULL, 3);
INSERT INTO `agk_charges`.`charges` (`charge_id`, `charge`, `description`, `unit_id`) VALUES (DEFAULT, 'Детонирующий шнур ДШТВ 150/800', NULL, 1);
INSERT INTO `agk_charges`.`charges` (`charge_id`, `charge`, `description`, `unit_id`) VALUES (DEFAULT, 'Детонирующий шнур ДШУ-33', NULL, 1);
INSERT INTO `agk_charges`.`charges` (`charge_id`, `charge`, `description`, `unit_id`) VALUES (DEFAULT, 'Детонирующий шнур ДШТТ-180', NULL, 1);
INSERT INTO `agk_charges`.`charges` (`charge_id`, `charge`, `description`, `unit_id`) VALUES (DEFAULT, 'Детонирующий шнур Hexacord T-150 RDX', NULL, 1);

COMMIT;


-- -----------------------------------------------------
-- Data for table `agk_charges`.`storages`
-- -----------------------------------------------------
START TRANSACTION;
USE `agk_charges`;
INSERT INTO `agk_charges`.`storages` (`storage_id`, `storage_name`) VALUES (DEFAULT, 'Склад ВМ');
INSERT INTO `agk_charges`.`storages` (`storage_id`, `storage_name`) VALUES (DEFAULT, 'Партия №1');
INSERT INTO `agk_charges`.`storages` (`storage_id`, `storage_name`) VALUES (DEFAULT, 'Партия №2');
INSERT INTO `agk_charges`.`storages` (`storage_id`, `storage_name`) VALUES (DEFAULT, 'Партия №3');

COMMIT;

USE `agk_charges`;

DELIMITER $$
USE `agk_charges`$$
-- Жоғарыдағы 2 өрнекті орындағаннан кейін ТРИГГЕР өз жұмысын істеуі керек
-- яғни balans кестесінде жасалған өзгерістерге сәйкес әрекет жасалынуы қажет
CREATE DEFINER = CURRENT_USER TRIGGER `agk_charges`.`purchase_invoices_AFTER_INSERT` AFTER INSERT ON `purchase_invoices` FOR EACH ROW
BEGIN
    SET @ID :=  get_purchase_id(last_insert_id());
    INSERT INTO agk_charges.balans values (new.charge_id, new.qty, @ID) 
    ON DUPLICATE KEY UPDATE qty = qty + new.qty, storage_id = @ID;
END
$$

USE `agk_charges`$$
CREATE DEFINER = CURRENT_USER TRIGGER `agk_charges`.`sales_invoices_AFTER_INSERT` AFTER INSERT ON `sales_invoices` FOR EACH ROW
BEGIN
    SET @ID :=  get_sale_id(last_insert_id());
    INSERT INTO agk_charges.balans values (new.charge_id, new.qty, @ID) 
    ON DUPLICATE KEY UPDATE qty = qty + new.qty, storage_id = @ID;
    INSERT INTO agk_charges.balans values (new.charge_id, new.qty, 1) 
    ON DUPLICATE KEY UPDATE qty = qty - new.qty, storage_id = 1;
END
$$


DELIMITER ;
